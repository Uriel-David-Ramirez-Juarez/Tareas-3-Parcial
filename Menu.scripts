#!/bin/bash

clear

vis(){
echo "==========================================================================="
echo "l                                                                         l"
echo "l                                 -MENU-                                  l"
echo "l                                                                         l"
echo "l                                                                         l"
echo "l                                                                         l"
echo "l                                                                         l"
echo "l     1.-Arrays.sh                                 10.-Librerias.sh       l"
echo "l                                                                         l"
echo "l     2.-Case.sh                                   11.-Logicas.sh         l"
echo "l                                                                         l"
echo "l     3.-Colores.sh                                12.-OtrosUsos.sh       l"
echo "l                                                                         l"
echo "l     4.-Comprobaciones.sh                         13.-Select.sh          l"
echo "l                                                                         l"
echo "l     5.-Condicionales.sh                          14.-Señales.sh         l"
echo "l                                                                         l"
echo "l     6.-Funciones.sh                              15.-Until.sh           l"
echo "l                                                                         l"
echo "l     7.-Holamundo.sh                              16.-Variables.sh       l"
echo "l                                                                         l"
echo "l     8.-Holamundovar.sh                           17.-While.sh           l"
echo "l                                                                         l"
echo "l     9.-Iteraciones.sh                            18.-Aritmeticas.sh     l"
echo "l                                                                         l"
echo "l                                                                         l"
echo "l                                19.-Salir                                l"
echo "l                                                                         l"
echo "==========================================================================="
}


##------------------------------------------------

EDITOR=vim
PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'
#-------------------------------------------------

        echo "Bienvenido ¿Cual es tu nombre?:"
        read nombre

        echo "Hola $nombre"

while true
do
        vis
        echo "Ingrese el numero del Script que quiere ejecutar:"
        read n
        case $n in
                1)cd /home/ujuarez/scripts && ./Arrays.sh && sleep 2 && clear;;
                2)cd /home/ujuarez/scripts && ./Case.sh && sleep 2 && clear;;
                3)cd /home/ujuarez/scripts && ./Colores.sh && sleep 2 && clear;;
                4)cd /home/ujuarez/scripts && ./Comprobaciones.sh && sleep 2 && clear;;
                5)cd /home/ujuarez/scripts && ./Condicionales.sh && sleep 2 && clear;;
                6)cd /home/ujuarez/scripts && ./Funciones.sh && sleep 2 && clear;;
                7)cd /home/ujuarez/scripts && ./Holamundo.sh && sleep 2 && clear;;
                8)cd /home/ujuarez/scripts && ./Holamundovar.sh && sleep 2 && clear;;
                9)cd /home/ujuarez/scripts && ./Iteraciones.sh && sleep 2 && clear;;
                10)cd /home/ujuarez/scripts && ./Librerias.sh && sleep 2 && clear;;
                11)cd /home/ujuarez/scripts && ./Logicas.sh && sleep 2 && clear;;
                12)cd /home/ujuarez/scripts && ./OtrosUsos.sh && sleep 1 && clear;;
                13)cd /home/ujuarez/scripts && ./Select.sh && sleep 2 && clear;;
                14)cd /home/ujuarez/scripts && ./Señales.sh && sleep 2 && clear;;
                15)cd /home/ujuarez/scripts && ./Until.sh && sleep 2 && clear;;
                16)cd /home/ujuarez/scripts && ./Variables.sh && sleep 2 && clear;;
                17)cd /home/ujuarez/scripts && ./While.sh && sleep 2 && clear;;
                18)cd /home/ujuarez/scripts && ./Aritmeticas.sh && sleep 2 && clear;;
                19)echo "Hasta la proxima crack" && sleep 1 && clear && exit 0;;
                *)echo "Opcion no encontrada, intente de nuevo:" && sleep 1 && clear;;

        esac
done
## Aqui finaliza el codigo del menu.

## Aqui mismo pondre los 18 scripts para no tener separado el menu en 2 partes.

====================================================================================================
1- Aritmeticas.sh
#!/bin/bash

#-,+, *, /, %, **, variable++, variable--, --variable, ++variable
# == : igualdad
# != : desigualdad

# Pruebas
Valor1=23
Valor2=45

# Para mas operaciones puede usarse expr o [ ]

Resultado=$[${Valor1} + ${Valor2}]
echo "Resultado: ${Resultado}"

Resultado=$[ ${Valor1} + ${Valor2} + 3]
echo "Resultado: ${Resultado}"

Valor1=5
VAlor2=4
echo "${Valor1} y ${Valor2}"

Resultado=$[${Valor1} + ${Valor2} + 2]
echo "Ahora: ${Valor1} + ${Valor2} +2 = ${Resultado}"

Resultado=$[${Valor1} + $[${Valor2} * 3 ]]
echo "Ahora: ${Valor1} + ${Valor2} * 3 = ${Resultado}"
======================================================================================================
2- Arrays.sh
#!/bin/bash

# Muestra el uso de arrays

# Podemos crear arrays de una dimension
asociaciones[0]="Gruslin"
asociaciones[1]="Hackresi"
asociaciones[2]="NavarradotNET"
asociaciones[3]="Riberlug"

# Otra forma de definirlos
partidos=("UPN" "PSN" "CDN" "IUN" "Nafarroa BAI" "RCN" )
numeros=(15 23 45 42 23 1337 23 666 69)

echo ${asociaciones[0]} es una asociacion, ${partidos[1]} un partido

#echo "Tamaño: $#asociaciones"
#echo "Tamaño: ${$#{partidos}}"
=====================================================================================================
3- Case.sh
#!/bin/bash

NOMBRE=""

echo n "Dame un nombre: "
read NOMBRE

case ${NOMBRE} in
inigo)
echo "${NOMBRE} dice: me dedico a Navarrux"
;;
sten)
echo "${NOMBRE} dice: tengo un blog friki"
;;
asier)
echo "${NOMBRE}> dice: .NET me gusta"
;;
pello)
echo "${NOMBRE}> dice: el shell mola"
;;
*)
echo "A ${NOMBRE} no lo conozco"
esac
======================================================================================================
4- Colores.sh
#!/bin/bash

## Los colores ANSI
# para darle color a los scrips debemos usar los codigo ANSI
# junto "con echo -e ". Para meter el caracter especial escape
# usamos \033

# Ejem: \033[0m : volver al color por defecto
# \033[40m: color de fondo negro
# \033[20m\033[32m: fondo negro primer plano verde

# Esta es la muestra de colores, ejecutalo para ver como queda

echo -e "\033[40m\033[37m  Blanco       \033[0m"
echo -e "\033[40m\033[1;37m  Gris claro \033[0m"
echo -e "\033[40m\033[30m  Negro        \033[0m (esto es negro)"
echo -e "\033[40m\033[1;30m  Gris       \033[0m"
echo -e "\033[40m\033[31m  Rojo         \033[0m"
echo -e "\033[40m\033[1;31m  Rojo claro \033[0m"
echo -e "\033[40m\033[32m  Verde        \033[0m"
echo -e "\033[40m\033[1;32m  Verde claro        \033[0m"
echo -e "\033[40m\033[33m  Marron       \033[0m"
echo -e "\033[40m\033[1;33m  Amarillo   \033[0m"
echo -e "\033[40m\033[34m  Azul         \033[0m"
echo -e "\033[40m\033[1;34m  Azul claro \033[0m"
echo -e "\033[40m\033[35m  Purpura      \033[0m"
echo -e "\033[40m\033[1;35m  Rosa       \033[0m"
echo -e "\033[40m\033[36m  Cyan         \033[0m"
echo -e "\033[40m\033[1;36m  Cyan claro \033[0m"

# Se puede poner fondos de otro color
echo -e "\033[42m\033[31m Navarrux v1,0         \033[0m"
echo -e "\033[40m\033[4;33m Amarillo            \033[0m"
==========================================================================================================
5- Comprobaciones.sh
#!/bin/bash

# Scrip para comprobar si un fihero existe. Espera un parametro
if [ -e $1 ] && [ -f $1 ]
then
echo "OK, el fichero existe"
else echo "No existe"
fi

# Para comprobar la negacion usariamos el simbolo: !
if [ ! -e $1 ]
then
        echo "No existe"
fi
============================================================================================================
6- Condicionales.sh
#!/bin/bash

#Condicionales

VARIABLE=45

if [ ${VARIABLE} -gt 0 ]; then
        echo "${VARIABLE} es mayor que 0"
fi

# podemos meter el then en la siguiente linea
if [ -e "/etc/shadow" ]
then
        echo "OK, parece que tienes un sitema con shadow pass"
fi

## Estructura if-else

OTRA=-23

if [ ${OTRA} -lt 0 ]
then
        echo "${OTRA} es menor que 0"
else
        echo "${OTRA} es mayor que 0";
fi

## Estructura if-elseif

# Vamos a usar "read" para pedirle datos al usuario

echo -n "Mete un valor: "
read "Valor1"
echo -n "Mete otro valor: "
read "Valor2"

echo "Has introducido los valores ${Valor1} y ${Valor2} "

if [ ${Valor1} -gt ${Valor2} ]
then
        echo "${Valor1} es mayor que ${Valor2}"
elif [ ${Valor1} -lt ${Valor2} ]
then
        echo "${Valor1} es menor que ${Valor2}"
else
        echo "${Valor1} y ${Valor2} son iguales"
fi

## Estructura test
# Ejecutar operacion si no se cumple la condicion
# test condicion || operacion
# Ejecutar operacion si se cumple
# test condicion && operacion

# Este test crea un fichero si no existe
test -f './fichero.txt' || touch "fichero.txt"
========================================================================================================
7- Funciones.sh
#!/bin/bash

## funciones

# antes que nada hay que definir las funciones, si no solo daria error
# las funciones toman parametros $numero, como el script

# variable
Resultado=0

# Una funcion que muestra valores por pantalla
muestrapantalla () {
        echo "Valores: $0> $1 y $2 y $3"
}

# Puede usarse el return pero solo para devolver numeros
sumame () {
        echo "Estamos en la funcion: ${FUNCNAME}"
        echo "Parametros: $1 y $2"
        Resultado=$[${1} + ${2}]
        return 0
}

# Es posible la funcion recursiva
boom () {
        echo "No ejecutes esto..."
        boom
}

# La llamada  de se puede hacer asi, sin parentesis
muestrapantalla 3 4 "epa"

# Llamamos a la funcion y si devuelve 0 es correcto
sumame 45 67 && echo "OK" || echo "Ocurrio un error"

echo "Resultado: ${Resultado} $!"
========================================================================================================
8- Holamundo.sh
#!/bin/bash
echo "Hola mundo"
========================================================================================================
9- Holamundovar.sh
#!/bin/bash

# En primera linea establezco que el shell se debe ejecutar

# Se define una variable
SALUDO="Hola mundo"
echo -n "Este script te dice: "
echo ${SALUDO}
=========================================================================================================
10- Iteraciones.sh
#!/bin/bash

echo "FOR simple: "
for i in a b c d e f g h i
do
 echo  "letra: $i"
done

NOMBRES="Iñigo Sten Asier Pello Roberto"
echo "FOR simple para recorrer un array: "
echo "Participantes en la 4party: "

for i in ${NOMBRES}
do
    echo ${i}
done

echo "FOR con el resultado de un comando"

for i in `cat direcciones.txt`
do
   echo ${i}
done

echo "FOR con ficheros"

for i in "*.sh"
do

    ls ${i}
done

echo "FOR clásico "

for (( cont=0 ; ${cont} < 10 ; cont=`expr $cont + 1` ))
do
    echo "Ahora valgo> ${cont}"
done
====================================================================================================================
11- Libreria.sh
#!/bin/bash

# No es que existan las librerias pero se pueden simular
# algo similar

# Esta es la forma de importar funciones
source libreria.sh

muestrapantalla 69 123 "epa"
sumame 1337 3389 && echo "OK" || echo "Ocurrio un error"

echo "Resultado: ${Resultado} $!"
======================================================================================================================
12- Logicas.sh
#!/bin/bash

## Operadores logicas

# && : and
# || : or
# ! : not

booleano=true

# Si la variable booleano es true veremos por pantalla "OK"
$booleano && echo "OK" || echo "no es true"

otrobool=!${booleano}
test ${otrobool} || echo "Ahora es falso"

# Mediante && podemos encadenar comandos
#who && ps -axf && echo "OK"

## comparaciones : -eq, -ne, -lt, -le, -gt, or -ge

valor=6

test $valor -le 6 && echo "Se cumple"
# Asignaciones

nuevo=${valor}

test ${nuevo} -eq ${valor} && echo "Son los mismo"

echo "Ahora ${nuevo} es lo mismo que ${valor}"
=======================================================================================================================
13- OtrosUsos.sh
#!/bin/bash

# Muestra el uso de variables

# Sacar parte del valor de una variable (subtring)
NOMBRE="Navarrux Live edition"
echo ${NOMBRE} una parte ${NOMBRE:8} y otra ${NOMBRE:8:4}

# Valores por defecto
# ${variable:-valorpordefecto}
SINVALOR=
echo "Variable SINVALOR: ${SINVALOR:-31337} eta ${VACIO:- 'Miguel Indurain'}"
echo "La variable SINVALOR no tiene valor algun ${SINVALOR} "

# Esto es igual pero el valor queda establecido
# ${variable:=valorpordefecto}
echo "Variable SINVALOR: ${SINVALOR:=31337} eta ${VACIO:='Miguel Indurain'} "
echo "La variable SINVALOR no tiene valor algun ${SINVALOR} "

# Y lo contrario: si la ariable Si tiene valor, se le pone otro
# ${Variable:+valorpordefecto}
PROGRAMA='sniffit'
echo "Valor de PROGRAMA: ${PROGRAMA:+'tcpdump'} y ahora ${PROGRAMA}"

# Si la variable esta sin dfinir o vacia se muestra un error. En caso
# contrario se le asigna un valor por defecto
# ${variable:?valorpordefecto}

# Otros
# ${!prefijo*} : nos devuelve una lista de las variables que comienzan
# con determinado prefijo
# Podemos probar con el for:
for i in ${!P*};do echo $i ;
done
===========================================================================================================================
14- Select.sh
#!/bin/bash

## Estructura select

# El select es similar al choise de msdos
# sirve para crear menus de seleccion

echo "Select de distros"

DISTROS="Debian Ubuntu Navarrux Gentoo Mandriiva"

echo "Selecciona la mejor opcion por favor: ${resultado}"

select resultado in ${DISTROS}

do
        # Si la longitud de cadena de resultado es > 0 ya esta seleccionado
        (test ${#resultado} -ne 0 ) && break

        echo "Selecciona la mejor opcion por favor ${resultado}"
done

echo "Sistema seleccionado: [${resultado} longitud de cadena: ${#resultado}]"
===================================================================================================================
15- Señales.sh
#!/bin/bash

funcion () {
  echo "Se ha recibido una señal: ${FUNCNAME} ${0}"
  }

  trap "funcion" INT QUIT TSTP
        echo "Estoy muy cansado :("
while true
do
  sleep 1
    echo "dormire un momento"
        sleep 1
        echo "espera"
        sleep 1
        echo "esperaaaaaaa"
        sleep 1
        echo "que te esperes >:l"
        sleep 1
        echo "ya descanse, gracias por esperar :)"
break
done
=======================================================================================================================
16- Until.sh
#!/bin/bash

## El bucle until
# Un bucle until se ejecuta hasta que el test resulte falso

echo "Estructura until"

cont=15

until (test ${cont} -lt 0)
do
        cont=$[$cont - 1]
        echo "Valor del contador: ${cont}"
done

echo "Valor final del contador: ${cont}"
========================================================================================================================
17- Variables.sh
#!/bin/bash

# Muestra el uso de variables

# No existen los tipos

# Definicion de variables
una_variable="666"
MI_NOMBRE="Uriel"
NOMBRES="Uriel David Ramirez Juarez"
BOOLEANO=true

echo "Echemos un ojo a las variables "
echo "Un numero ${una_variable}"
echo "Un nombre ${MI_NOMBRE}"
echo "Un grupo de nombres ${NOMBRES}"

# Al script se le pueden pasar argumentos. Para recogerlos
# hay que usar : ${numero} donde:
# ${0} : nombre del script
# ${1} : primer argumento
# ${2} : segundo argumento
# ...etc.
echo "Has invocado el script pasandome ${0} eta ${1} "
# Otras variables especiales
# $# : Numero de argumentos
echo "Me has pasado $# argumentos"

# $@ : grupo de parametros del script
echo IDa: ${!} y $@
# Variables de entorno
echo "Mi directorio actual: ${PWD} y mi usuario ${UID}"
======================================================================================================================
18- While.sh
#!/bin/bash

## Estructura while
echo "WHILE en marcha"

cont=0

# Un bucle que terminara cuando $cont sea mayor que 100
while ( test ${cont} -lt 100 )
do
        cont=$[ $cont + 10 ]
        echo "Valor del contador: ${cont}"
done

echo "Valor final del contador: ${cont}"

## Un while infinito
# while true; do comando; done
=========================================================================================================================
